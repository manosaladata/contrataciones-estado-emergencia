install.packages("xlsx")
setwd("D:/GITHUB-PROYECTOS BEST")
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx",sheet = 1)
library(xlsx)
setwd("D:/GITHUB-PROYECTOS BEST")
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx",sheet = 1)
library(xlsx)
library(readxl)
install.packages("xlsx")
library(xlsx)
setwd("D:/GITHUB-PROYECTOS BEST")
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx",sheet = 1)
setwd("D:/GITHUB-PROYECTOS BEST/contrataciones-estado-emergencia/R")
setwd("D:/GITHUB-PROYECTOS BEST/contrataciones-estado-emergencia/R")
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx",sheet = 1)
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx")
setwd("D:/GITHUB-PROYECTOS BEST/contrataciones-estado-emergencia")
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx")
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx")
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx")
setwd("D:/GITHUB-PROYECTOS BEST/contrataciones-estado-emergencia/R")
library(xlsx)
setwd("D:/GITHUB-PROYECTOS BEST/contrataciones-estado-emergencia/R")
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx")
library(tint)
# invalidate cache when the package version changes
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tint'))
options(htmltools.dir.version = FALSE)
library(readxl)
library(correlation)
library(tidyverse)
library(esquisse)                        #Gráficos simples sin código.
setwd("D:/GITHUB-PROYECTOS BEST/contrataciones-estado-emergencia/Data")
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx")
#names(contr_direc)
contr_direc[,28]<-sapply(contr_direc[,28],function(x)x/1000000)
names(contr_direc)[28]="MONTO_SOLES_EN_MILLONES"
#names(contr_direc)
options(scipen=999)                                  #Evita que salga en notación científica (exponencial).
#sapply(contr_direc, class)                          #Analizamos la clase de cada columna. Ojo: FECHACONVOCATOERIA ESTÁ EN POSIXct y POSIxt q es formato de fecha
boxplot(contr_direc$"MONTO_SOLES_EN_MILLONES")
zonas<- select(contr_direc, "ENTIDAD_DEPARTAMENTO","MONTO_SOLES_EN_MILLONES")
zonas  %>%
group_by(ENTIDAD_DEPARTAMENTO) %>%
summarise(MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES),num_contr=n())%>%
arrange(desc(num_contr))%>%                                    #No usar string, lo lee como tal.
View()
zonas %>%
group_by(ENTIDAD_DEPARTAMENTO) %>%
summarise(MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES),numero=n())%>%
arrange(desc(MONTOADJUDICADOSOLES))%>%
view()
library(tint)
# invalidate cache when the package version changes
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tint'))
options(htmltools.dir.version = FALSE)
zonas2<-zonas %>%
group_by(ENTIDAD_DEPARTAMENTO) %>%
summarise(MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES),numero=n())%>%
arrange(desc(MONTOADJUDICADOSOLES))%>%
zonas2<-zonas %>%
group_by(ENTIDAD_DEPARTAMENTO) %>%
summarise(MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES),numero=n())%>%
arrange(desc(MONTOADJUDICADOSOLES))%>%
library(readxl)
library(readxl)
library(correlation)
library(tidyverse)
library(esquisse)                        #Gráficos simples sin código.
setwd("D:/GITHUB-PROYECTOS BEST/contrataciones-estado-emergencia/Data")
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx")
#names(contr_direc)
contr_direc[,28]<-sapply(contr_direc[,28],function(x)x/1000000)
names(contr_direc)[28]="MONTO_SOLES_EN_MILLONES"
#names(contr_direc)
options(scipen=999)                                  #Evita que salga en notación científica (exponencial).
#sapply(contr_direc, class)                          #Analizamos la clase de cada columna. Ojo: FECHACONVOCATOERIA ESTÁ EN POSIXct y POSIxt q es formato de fecha
boxplot(contr_direc$"MONTO_SOLES_EN_MILLONES")
zonas<- select(contr_direc, "ENTIDAD_DEPARTAMENTO","MONTO_SOLES_EN_MILLONES")
zonas2<-zonas  %>%
group_by(ENTIDAD_DEPARTAMENTO) %>%
summarise(MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES),num_contr=n())%>%
arrange(desc(num_contr))%>%
zonas2<-group_by(zonas,ENTIDAD_DEPARTAMENTO)
zonas2<-group_by(zonas,ENTIDAD_DEPARTAMENTO)
zonas3<-summarise(MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES))
zonas3<-summarise(zonas2,MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES))
View(zonas3)
zonas2<-group_by(zonas,ENTIDAD_DEPARTAMENTO)
zonas2<-summarise(zonas2,MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES,num_contr=n()))
zonas2<-arrange(zonas2,desc(num_contr))
View(zonas2)
zonas2<-summarise(zonas2,MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES,num_contr=n()))
zonas2<-summarise(zonas2,MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES))
zonas2<-group_by(zonas,ENTIDAD_DEPARTAMENTO)
zonas2<-summarise(zonas2,MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES,num_contr=n()))
View(zonas2)
#Veamos los montos por departamentos
zonas<- select(contr_direc, "ENTIDAD_DEPARTAMENTO","MONTO_SOLES_EN_MILLONES")
#Ordenamos de acuerdo al número de contratos
zonas  %>%
group_by(ENTIDAD_DEPARTAMENTO) %>%
summarise(MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES),num_contr=n())%>%
arrange(desc(num_contr))%>%                                    #No usar string, lo lee como tal.
View()
zonas2<-group_by(zonas,ENTIDAD_DEPARTAMENTO)
zonas2<-summarise(zonas2,num_contr=n()))
zonas2<-summarise(zonas2,num_contr=n())
View(zonas2)
zonas2<-summarise(zonas2,MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES),num_contr=n())
zonas2<-group_by(zonas,ENTIDAD_DEPARTAMENTO)
zonas2<-summarise(zonas2,MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES),num_contr=n())
View(zonas2)
zonas2<-arrange(zonas2,desc(num_contr))
zonas2<-group_by(zonas,ENTIDAD_DEPARTAMENTO)
zonas2<-summarise(zonas2,MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES),num_contr=n())
zonas2<-arrange(zonas2,desc(num_contr))
knitr::kable(zonas2)
zonas2<-group_by(zonas,ENTIDAD_DEPARTAMENTO)
zonas2<-summarise(zonas2,MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES),num_contr=n())
zonas2<-arrange(zonas2,desc(num_contr))
knitr::kable(
zonas2, caption = 'De acuerdo al número de contratos.'
)
zonas<- select(contr_direc, "ENTIDAD_DEPARTAMENTO","MONTO_SOLES_EN_MILLONES")
zonas2<-group_by(zonas,ENTIDAD_DEPARTAMENTO)
zonas2<-summarise(zonas2,MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES),num_contr=n())
zonas_num<-arrange(zonas2,desc(num_contr))
zonas_num<-head(zonas2_num,4)
zonas<- select(contr_direc, "ENTIDAD_DEPARTAMENTO","MONTO_SOLES_EN_MILLONES")
zonas2<-group_by(zonas,ENTIDAD_DEPARTAMENTO)
zonas2<-summarise(zonas2,MONTOADJUDICADOSOLES=sum(MONTO_SOLES_EN_MILLONES),num_contr=n())
zonas_num<-arrange(zonas2,desc(num_contr))
zonas_num<-head(zonas_num,4)
View(contr_direc)
names(contr_direc)
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx")
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx")
library(readxl)
library(correlation)
library(tidyverse)
library(esquisse)                        #Gráficos simples sin código.
setwd("D:/GITHUB-PROYECTOS BEST/contrataciones-estado-emergencia/Data")
contr_direc <- read_excel("CONOSCE_CONTRATACIONDIRECTA.xlsx")
#names(contr_direc)
contr_direc[,28]<-sapply(contr_direc[,28],function(x)x/1000000)
names(contr_direc)[28]="MONTO_SOLES_EN_MILLONES"
names(contr_direc)[31]="RUCPROV"
#names(contr_direc)
options(scipen=999)                                  #Evita que salga en notación científica (exponencial).
#sapply(contr_direc, class)                          #Analizamos la clase de cada columna. Ojo: FECHACONVOCATOERIA ESTÁ EN POSIXct y POSIxt q es formato de fecha
boxplot(contr_direc$"MONTO_SOLES_EN_MILLONES")
library(shiny); runApp('shiny.R')
runApp('shiny.R')
res = GET("https://api.sunat.cloud/ruc/20419385442")
res    #Está en Json format, como diccionario
library(httr)
library(jsonlite)
res = GET("https://api.sunat.cloud/ruc/20419385442")
res    #Está en Json format, como diccionario
data = fromJSON(rawToChar(res$content))
names(data)
data$empleados
data$empleados
names(data)       #Nos da el nombre de los keys.
data$trabajadores
empleados<-data$empleados
View(empleados)
empleados
library(hash)
install.packages(hash)
install.packages("hash")
data2<-fromJSON(content("res", type("tex")))  #Pasamos de texto a formato Json
data2<-fromJSON(content(res, type("tex")))  #Pasamos de texto a formato Json
data2<-fromJSON(content(res, type("tex")))  #Pasamos de texto a formato Json
data2<-fromJSON(content(res, type("text")))  #Pasamos de texto a formato Json
data2<-fromJSON(content(res, type="text"))  #Pasamos de texto a formato Json
names(data2)
data2[["empleados"]]
empleados2<-data2[["empleados"]]
view(empleados2)
View(empleados2)
emmpleados2$trabajadores
empleados2$trabajadores
df<-fromJSON(data2, flatten = TRUE) %>%
data.frame()
df<-fromJSON(data2, flatten = TRUE) %>%
data.frame()
df <- fromJSON(data2, flatten = TRUE) %>%
data.frame()
df <- fromJSON(data2, flatten = TRUE) %>%
data.frame()
fromJSON(data2) %>% as.data.frame
library(jsonlite)
library(tidyverse)
library(tidyverse)
df <- fromJSON(data2, flatten = TRUE) %>%
data.frame
library(jsonlite)
df <- fromJSON(data2, flatten = TRUE) %>%
data.frame
data3<-fromJSON(content(res, as="text", encoding = "UTF-8"))
df <- fromJSON(data3, flatten = TRUE) %>%
data.frame
df <- fromJSON(data3, flatten = TRUE) %>%
data.frame
df <- fromJSON(response, flatten = TRUE) %>%
data.frame
response <- content(res, as = "text", encoding = "UTF-8")
df <- fromJSON(response, flatten = TRUE) %>%
data.frame
df <- fromJSON(rawToChar(res$content), flatten = TRUE) %>%
data.frame
require(reshape2)
df <- fromJSON(response, flatten = TRUE) %>%
data.frame
empleados<-data$empleados
empleados
empleados[["trabajadores"]]
fecha1<-empleados="2020-08"
fecha1<-(empleados="2020-08")
fecha1<-list(empleados="2020-08")
View(fecha1)
library(httr)
library(jsonlite)
library(tidyverse)
url1<-"https://api.sunat.cloud/ruc/20419385442"
res <- GET(url)
res
data <- content(res, as = "text", encoding = "UTF-8")
data
url1<-"https://api.sunat.cloud/ruc/20419385442"
res <- GET(url)
res
data <- content(res, as = "text", encoding = "UTF-8")
data
data <- content(res, as = "text", encoding = "UTF-8")
res <- GET(url)
res
res <- GET(url)
library(httr)
res <- GET(url1)
res
data <- content(res, as = "text", encoding = "UTF-8")
data
df <- fromJSON(data, flatten = TRUE) %>%
data.frame
names(data2)
names(data)
data<-fromJSON(content(res, type="text", encoding = "UTF-8"))  #llevamos a texto para manipular con Json
data
names(data)
empleados2<-data2[["empleados"="trabajores"]]
trabajadores<-data[["empleados"="trabajores"]]
View(data)
trabajadores<-data[["empleados"="2020-08"]]
trabajadores<-data[[empleados="2020-08"]]
empleados<-data[empleados]
empleados<-data[[empleados]]
empleados<-data["empleados"]
empleados<-data[["empleados"]]   #[] dentro pues es como un diccionario
empleados<-data[["empleados"]]   #[] dentro pues es como un diccionario
View(empleados)
empleados[2020-08]
empleados["2020-08"]
2020-08<- empleados["2020-08"]
agosto_20<- empleados["2020-08"]
agosto_20
agosto_20$trabajadores
agosto_20$"trabajadores"
agosto_20["trabajadores"]
View(agosto_20)
agosto_20<- empleados["2020-08"=`2020-08`$trabajadores]
agosto_20<- empleados["2020-08"="2020-08"$trabajadores]
agosto_20<- empleados["2020-08"=="2020-08"$trabajadores]
agosto_20<- empleados["2020-08"]
agosto_20
agosto_20$trabajadores
agosto_20["2020-08"]$trabajadores
agosto_20[["2020-08"]]
empleados<-data[["empleados"]]   #[] dentro pues es como un diccionario
empleados[["2020-08"]][["trabajadores"]]
View(data)
trabajadores<-empleados[["2020-08"]][["trabajadores"]]
names(data)
empleados<-data[["razon_social"]]
empleados<-data[["empleados"]]                  #[] dentro pues es como un diccionario
trabajadores<-empleados[["2020-08"]][["trabajadores"]]
fecha_inscripción<-data[["fecha_inscripcion"]]
"as"+"s"
#RUCS
#IDEA: QUE EL USUARIO PONGA "INGRESE RUC" Y SALGA EL RESULTADO
#¿HAY ALGO COMO "abc"+"d"="abcd" en R?
#Si lo hay entonces, el usuario ingresa el número de la ruc
#Luego se convierte a str y se añade al link base
"as""s"
View(empleados)
url1<-"https://api.sunat.cloud/ruc/20555589574"
res <- GET(url1)
data<-fromJSON(content(res, type="text", encoding = "UTF-8"))  #llevamos a texto para manipular con Json
data<-fromJSON(content(res, type="text", encoding = "UTF-8"))  #llevamos a texto para manipular con Json
names(data)
empleados<-data[["razon_social"]]
empleados<-data[["empleados"]]                  #[] dentro pues es como un diccionario
fecha_inscripción<-data[["fecha_inscripcion"]]
trabajadores_agosto<-empleados[["2020-08"]][["trabajadores"]]
trabajadores_agosto<-empleados[["2020-08"]][["trabajadores"]]
representante_legal<-data[["representantelegal"]]
representante_legal<-data[["representante_legal"]]
View(representante_legal)
representante_legal<-data[representante_legal[["DNI 07457070"]][["nombre"]]]
representante_legal<-representante_legal[["DNI 07457070"]][["nombre"]]
representante_legal<-data[["representante_legal"]][["DNI 09633749"]][["nombre"]]
representante_legal
representante_legal<-data[["representante_legal"]][["DNI 09633749"]][["nombre"]]
representante_legal<-data[["representante_legal"]]
representante_legal
View(representante_legal)
representante_legal_name<-representante_legal[["DNI 07457070"]][["nombre"]]
paste("a""b")
paste("a""b",sep = " ", collapse = NULL))
paste("a","b",sep = " ", collapse = NULL))
paste("a","b",sep = " ", collapse = NULL)
paste("a","b",sep = "", collapse = NULL)
RUC=20555589574
str(RUC)
RUC_str<-str(RUC)
RUC_str<-"RUC"
RUC_str<-as.character(RUC)
url1<-paste("https://api.sunat.cloud/ruc/20555589574",RUC_str,sep = "", collapse = NULL)
url1<-paste("https://api.sunat.cloud/ruc/20555589574",RUC_str,sep = "", collapse = NULL)
url1<-paste("https://api.sunat.cloud/ruc/20555589574",RUC_str,sep = "", collapse = NULL)
url1<-paste("https://api.sunat.cloud/ruc/",RUC_str,sep = "", collapse = NULL)
res <- GET(url1)   #saldrá en formato unicode, necesitamos pasar a texto al leer en Json
data<-fromJSON(content(res, type="text", encoding = "UTF-8"))  #llevamos a texto para manipular con Json
data
names(data)
razon_social<-data[["razon_social"]]
empleados<-data[["empleados"]]       #[] dentro pues es como un diccionario
fecha_inscripción<-data[["fecha_inscripcion"]]
representante_legal<-data[["representante_legal"]]  #Primero el diccionarion general, si creo todo junto no saldrá
representante_legal_name<-representante_legal[["DNI 07457070"]][["nombre"]]
trabajadores_agosto<-empleados[["2020-08"]][["trabajadores"]]
x <- data.frame("Nombre de la empresa"=razon_social,"Trabajadores(agosto-2020)" = trabajadores_agosto, "Nombre del representante legal(agosto)" = representante_legal_name)
x
y <-datatable(x)
library(DT)
y <-datatable(x)
View(y)
y <-datatable("Nombre de la empresa"=razon_social,"Trabajadores(agosto-2020)" = trabajadores_agosto, "Nombre del representante legal(agosto)" = representante_legal_name)
view(x)
x <- data.frame("Nombre de la empresa"=razon_social,"Trabajadores(agosto-2020)" = trabajadores_agosto, "Nombre del representante legal(agosto)" = representante_legal_name)
view(x)
x <- data.frame("Nombre de la empresa"=razon_social, "Nombre del representante legal(agosto)" = representante_legal_name,
"Trabajadores(agosto-2020)" = trabajadores_agosto,"fecha de inscripción"=fecha_inscripción)
view(x)
debugSource('D:/GITHUB-PROYECTOS BEST/contrataciones-estado-emergencia/R/apisunat_ordenado.R', encoding = 'UTF-8')
library(shiny); runApp('shiny.R')
library(formattable)
runApp('shiny.R')
runApp('D:/GITHUB-PROYECTOS BEST/contrataciones-estado-emergencia/R/shiny.R')
runApp('shiny.R')
#RUCS
#IDEA: QUE EL USUARIO PONGA "INGRESE RUC" Y SALGA EL RESULTADO
#INGRESE RUC
RUC=20555589574
debugSource('D:/GITHUB-PROYECTOS BEST/contrataciones-estado-emergencia/R/apisunat_ordenado.R', encoding = 'UTF-8')
library(httr)
library(jsonlite)
#library(tidyverse)
#library(DT)
#RUCS
#IDEA: QUE EL USUARIO PONGA "INGRESE RUC" Y SALGA EL RESULTADO
#INGRESE RUC
RUC=20555589574
RUC_str<-as.character(RUC)
#Usamos paste para concatenar strings, con "" para evitar espacio:
url1<-paste("https://api.sunat.cloud/ruc/",RUC_str,sep = "", collapse = NULL)
res <- GET(url1)   #saldrá en formato unicode, necesitamos pasar a texto al leer en Json
#res
data<-fromJSON(content(res, type="text", encoding = "UTF-8"))  #llevamos a texto para manipular con Json
#data    #exploremos
#names(data)  #veamos qué variales podrían interesar
razon_social<-data[["razon_social"]]
empleados<-data[["empleados"]]       #[] dentro pues es como un diccionario
fecha_inscripción<-data[["fecha_inscripcion"]]
representante_legal<-data[["representante_legal"]]  #Primero el diccionarion general, si creo todo junto no saldrá
representante_legal_name<-representante_legal[["DNI 07457070"]][["nombre"]]  #Ver las indicaciones de view para encontrar el código bien
trabajadores_agosto<-empleados[["2020-08"]][["trabajadores"]]
x <- data.frame("Nombre de la empresa"=razon_social, "Nombre del representante legal(agosto)" = representante_legal_name,
"Trabajadores(agosto-2020)" = trabajadores_agosto,"fecha de inscripción"=fecha_inscripción)
view(x)
View(data)
data(cars)
force(cars)
data[["representante_legal"]][[1]][["nombre"]]
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
RUC=20555589574
RUC_str<-as.character(RUC)
#Usamos paste para concatenar strings, con "" para evitar espacio:
url1<-paste("https://api.sunat.cloud/ruc/",RUC_str,sep = "", collapse = NULL)
res <- GET(url1)   #saldrá en formato unicode, necesitamos pasar a texto al leer en Json
#res
data<-fromJSON(content(res, type="text", encoding = "UTF-8"))  #llevamos a texto para manipular con Json
#data    #exploremos
#names(data)  #veamos qué variales podrían interesar
razon_social<-data[["razon_social"]]
empleados<-data[["empleados"]]       #[] dentro pues es como un diccionario
fecha_inscripción<-data[["fecha_inscripcion"]]
representante_legal<-data[["representante_legal"]]  #Primero el diccionarion general, si creo todo junto no saldrá
representante_legal_name<-representante_legal[[1]][["nombre"]]  #Ver las indicaciones de view para encontrar el código bien, DNI es el elemento 1
trabajadores_agosto<-empleados[["2020-08"]][["trabajadores"]]
x <- data.frame("Nombre de la empresa"=razon_social, "Nombre del representante legal(agosto)" = representante_legal_name,
"Trabajadores(agosto-2020)" = trabajadores_agosto,"fecha de inscripción"=fecha_inscripción)
view(x)
#INGRESE RUC
RUC=20555589574
RUC_str<-as.character(RUC)
#Usamos paste para concatenar strings, con "" para evitar espacio:
url1<-paste("https://api.sunat.cloud/ruc/",RUC_str,sep = "", collapse = NULL)
res <- GET(url1)   #saldrá en formato unicode, necesitamos pasar a texto al leer en Json
#res
data<-fromJSON(content(res, type="text", encoding = "UTF-8"))  #llevamos a texto para manipular con Json
#data    #exploremos
#names(data)  #veamos qué variales podrían interesar
razon_social<-data[["razon_social"]]
empleados<-data[["empleados"]]       #[] dentro pues es como un diccionario
fecha_inscripción<-data[["fecha_inscripcion"]]
representante_legal<-data[["representante_legal"]]  #Primero el diccionarion general, si creo todo junto no saldrá
representante_legal_name<-representante_legal[[1]][["nombre"]]  #Ver las indicaciones de view para encontrar el código bien, DNI es el elemento 1
trabajadores_agosto<-empleados[["2020-08"]][["trabajadores"]]
x <- data.frame("Nombre de la empresa"=razon_social, "Nombre del representante legal(agosto)" = representante_legal_name,
"Trabajadores(agosto-2020)" = trabajadores_agosto,"fecha de inscripción"=fecha_inscripción)
view(x)
#INGRESE RUC
RUC=20555589574
RUC_str<-as.character(RUC)
#Usamos paste para concatenar strings, con "" para evitar espacio:
url1<-paste("https://api.sunat.cloud/ruc/",RUC_str,sep = "", collapse = NULL)
res <- GET(url1)   #saldrá en formato unicode, necesitamos pasar a texto al leer en Json
#res
data<-fromJSON(content(res, type="text", encoding = "UTF-8"))  #llevamos a texto para manipular con Json
#data    #exploremos
#names(data)  #veamos qué variales podrían interesar
razon_social<-data[["razon_social"]]
empleados<-data[["empleados"]]       #[] dentro pues es como un diccionario
fecha_inscripción<-data[["fecha_inscripcion"]]
representante_legal<-data[["representante_legal"]]  #Primero el diccionarion general, si creo todo junto no saldrá
representante_legal_name<-representante_legal[[1]][["nombre"]]  #Ver las indicaciones de view para encontrar el código bien, DNI es el elemento 1
trabajadores_agosto<-empleados[["2020-08"]][["trabajadores"]]
x <- data.frame("Nombre de la empresa"=razon_social, "Nombre del representante legal(agosto)" = representante_legal_name,
"Trabajadores(agosto-2020)" = trabajadores_agosto,"fecha de inscripción"=fecha_inscripción)
view(x)
